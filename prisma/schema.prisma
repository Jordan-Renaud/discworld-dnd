// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// Auth

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Domain specific

model Character {
  id   Int    @id @default(autoincrement())
  name String
}

model ConsumablePrototype {
  id            String @id @default(cuid())
  name          String
  perkValue     Int
  perkAttribute String
  description   String @db.Text
}

model Consumable {
  id            String @id @default(cuid())
  name          String
  perkValue     Int
  perkAttribute String
  description   String @db.Text
}

enum ModifierType {
  ADVANTAGE
  PERK
  DISADVANTAGE
  QUIRK
  SKILL
}

model Occupation {
  id                   String                    @id @default(cuid())
  name                 String
  points               Int
  description          String                    @db.Text
  personalityModifiers PersonalityModifierType[]
  attributes           AttributeModifier[]
}

model AttributeModifier {
  id                   String                    @id @default(cuid())
  amount               Int
  attribute            String
  personalityModifiers PersonalityModifierType[]
  occupations          Occupation[]
}

model PersonalityModifierPrototype {
  id          String              @id @default(cuid())
  name        String
  description String              @db.Text
  points      Int
  type        ModifierType
  attributes  AttributeModifier[]
  occupations Occupation[]
}

model MiscItemPrototype {
  id          String  @id @default(cuid())
  name        String
  cost        Decimal
  weight      Decimal
  description String  @db.Text
}

model MiscItem {
  id          String  @id @default(cuid())
  name        String
  cost        Decimal
  weight      Decimal
  description String  @db.Text
}
